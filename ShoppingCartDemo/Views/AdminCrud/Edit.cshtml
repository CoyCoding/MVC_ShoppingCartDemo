@model ShoppingCartDemo.Models.ViewModel.ProductViewModel
@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
    <link href="~/Content/CheckoutErrors.css" rel="stylesheet" />
}
    <style>
    input,
    select,
    textarea {
        max-width: none;
    }

    .uploaded-image {
        width: 200px;
        height: 200px;
        object-fit: cover;
        float: right;
    }

        .image-list {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            padding-bottom: 50px;
        }

        @@media only screen and (max-width: 991px){
            .align-image-upload {
                display: -webkit-flexbox;
                display: -webkit-flex;
                display: flex;
                flex: auto;
                justify-content: center;
                flex-flow: wrap;
             }
        }

    .img-with-text {
        display: inline-block;
        text-align: center;
        width: 150px;
    }

        .img-with-text img {
            display: block;
            margin: 0 auto;
        }

        .img-with-text a{
            text-align: center;
        }
    </style>
<h2>Edit</h2>

@using (Html.BeginForm("Edit", "AdminCrud", 
    FormMethod.Post, new { enctype = "multipart/form-data" }))
{

                @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.Images)
        <div class="row justify-content-center">
            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                <div class="">
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", rows = 5 } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="">
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="">
                    @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.Seller, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="">
                    @Html.EditorFor(model => model.Seller, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Seller, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-md-10">
                @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="">
                    @Html.DropDownListFor(m => m.CategoryId, new SelectList(Model.Categories, "Id", "Name"), "Select Category", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>
@**@
            <div class="form-group col-md-10">
                <div class="align-image-upload">
                    <div>
                        <label>Image</label>
                        <input id="file" type="file" name="Image" size="400"
                               style="" />


                        <span class="" id="upload-file-info"></span>

                    </div>
                    <img />
                </div>
            </div>   

            <div class="col-md-10 image-list">    
                @if (Model.Images == null)
                {
                    <div class="form-control">No Images</div>
                }
                else
                {
                    foreach (var image in Model.Images)
                    {
                    <div class="img-with-text">
                        <img class="img-thumbnail" width="150" height="150"
                             src="@Url.Action("GetImage", "Home", new { image.Id })" />
                        @Html.ActionLink("Delete Image", "DeleteImage", "Home", new { imageId = image.Id, productId = Model.Id }, null)
                    </div>
                    }
                }
            </div>
            

            <div class="form-group col-md-6">
                <div class="">
                    <input type="submit" value="Save" class="btn btn-default" />
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>
        </div>
    </div>
}

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
<script>
    $(document).ready( () => {
        function previewFile() {
            
            var preview = document.querySelector('img'); //selects the query named img
            var file = document.querySelector('input[type=file]').files[0];
            var reader = new FileReader();

            reader.onloadend = function () {
                preview.classList.add('uploaded-image');
                preview.src = reader.result;
            }

            if (file) {
                reader.readAsDataURL(file); //reads the data as a URL
            } else {
                preview.src = "";
                preview.classList.remove('uploaded-image');
            }
        }
        $("#file").change(() => {
            alert('test');
            $('#upload-file-info').html($('#file').val());
            previewFile();
        });
    });
    </script>
}

